// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: active_channel.sql

package db

import (
	"context"
)

const createActiveChannel = `-- name: CreateActiveChannel :exec
INSERT INTO active_channels (guild_id, channel_id)
VALUES ($1, $2)
`

type CreateActiveChannelParams struct {
	GuildID   string
	ChannelID string
}

func (q *Queries) CreateActiveChannel(ctx context.Context, arg CreateActiveChannelParams) error {
	_, err := q.db.Exec(ctx, createActiveChannel, arg.GuildID, arg.ChannelID)
	return err
}

const deleteActiveChannel = `-- name: DeleteActiveChannel :exec
DELETE FROM active_channels
WHERE id = $1
`

func (q *Queries) DeleteActiveChannel(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteActiveChannel, id)
	return err
}

const getActiveChannels = `-- name: GetActiveChannels :many
SELECT id, guild_id, channel_id, created_at
FROM active_channels
`

func (q *Queries) GetActiveChannels(ctx context.Context) ([]ActiveChannel, error) {
	rows, err := q.db.Query(ctx, getActiveChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActiveChannel
	for rows.Next() {
		var i ActiveChannel
		if err := rows.Scan(
			&i.ID,
			&i.GuildID,
			&i.ChannelID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
