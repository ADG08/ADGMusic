// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sounds.sql

package db

import (
	"context"
)

const createSound = `-- name: CreateSound :exec
INSERT INTO sounds (name, url)
VALUES ($1, $2)
`

type CreateSoundParams struct {
	Name string
	Url  string
}

func (q *Queries) CreateSound(ctx context.Context, arg CreateSoundParams) error {
	_, err := q.db.Exec(ctx, createSound, arg.Name, arg.Url)
	return err
}

const deleteSound = `-- name: DeleteSound :exec
DELETE FROM sounds
WHERE id = $1
`

func (q *Queries) DeleteSound(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSound, id)
	return err
}

const getRandomSound = `-- name: GetRandomSound :one
SELECT id, name, url, created_at
FROM sounds
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetRandomSound(ctx context.Context) (Sound, error) {
	row := q.db.QueryRow(ctx, getRandomSound)
	var i Sound
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
	)
	return i, err
}

const getSound = `-- name: GetSound :one
SELECT id, name, url, created_at
FROM sounds
WHERE id = $1
`

func (q *Queries) GetSound(ctx context.Context, id int32) (Sound, error) {
	row := q.db.QueryRow(ctx, getSound, id)
	var i Sound
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
	)
	return i, err
}

const getSounds = `-- name: GetSounds :many
SELECT id, name, url, created_at
FROM sounds
`

func (q *Queries) GetSounds(ctx context.Context) ([]Sound, error) {
	rows, err := q.db.Query(ctx, getSounds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sound
	for rows.Next() {
		var i Sound
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
