// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: guilds.sql

package db

import (
	"context"
)

const createGuild = `-- name: CreateGuild :exec
INSERT INTO guilds (id, name)
VALUES ($1, $2)
`

type CreateGuildParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateGuild(ctx context.Context, arg CreateGuildParams) error {
	_, err := q.db.Exec(ctx, createGuild, arg.ID, arg.Name)
	return err
}

const getGuild = `-- name: GetGuild :one
SELECT id, name, created_at
FROM guilds
WHERE id = $1
`

func (q *Queries) GetGuild(ctx context.Context, id string) (Guild, error) {
	row := q.db.QueryRow(ctx, getGuild, id)
	var i Guild
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getGuilds = `-- name: GetGuilds :many
SELECT id, name, created_at
FROM guilds
`

func (q *Queries) GetGuilds(ctx context.Context) ([]Guild, error) {
	rows, err := q.db.Query(ctx, getGuilds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Guild
	for rows.Next() {
		var i Guild
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
